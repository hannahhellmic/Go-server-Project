package main

import (
	b "bufio"
	f "fmt"
	"os"
	"strings"
)

func getMin(a int, b int) int {
	if a < b {
		return a
	}
	return b
}

func createArray() []string {
	reader := b.NewReader(os.Stdin)
	s, _ := reader.ReadString('\n')
	s = strings.TrimSpace(s)
	a := strings.Split(s, " ")
	var arr []string
	for _, v := range a {
		arr = append(arr, v)
	}
	return arr
}

func addToMap(arr []string, m map[string][2]int, n int) {
	for _, v := range arr {
		if _, already := m[v]; already {
			val := m[v]
			val[n]++
			m[v] = val
		} else {
			temp := [2]int{0, 0}
			temp[n] = 1
			m[v] = temp
		}
	}
}

func getElems(m map[string][2]int) {
	for k, v := range m {
		if v[0] > 0 && v[1] > 0 {
			for i := 0; i < getMin(v[0], v[1]); i++ {
				f.Print(k, " ")
			}
		}

	}
}

func getJustElems(m map[string][2]int) {
	for k, v := range m {
		if v[0] > 0 && v[1] > 0 {
			f.Print(k, " ")
		}

	}
}

func main() {
	var arr1 = createArray()
	var arr2 = createArray()

	var m = make(map[string][2]int)
	addToMap(arr1, m, 0)
	addToMap(arr2, m, 1)
	// how many times
	getElems(m)
	f.Println("\n")
	//just elements
	getJustElems(m)
}
